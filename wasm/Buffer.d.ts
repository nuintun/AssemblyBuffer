declare module ASModule {
  type i8 = number;
  type i16 = number;
  type i32 = number;
  type i64 = bigint;
  type isize = number;
  type u8 = number;
  type u16 = number;
  type u32 = number;
  type u64 = bigint;
  type usize = number;
  type f32 = number;
  type f64 = number;
  type bool = boolean | number;
  export var UINT8_ARRAY_ID: u32;
  export class Buffer {
    static wrap(ptr: usize): Buffer;
    valueOf(): usize;
    constructor(length: i32, pageSize: u16);
    protected grow(length: i32): void;
    protected moveOffset(offset: i32): void;
    clear(): void;
    writeInt8(value: i8): void;
    writeUint8(value: u8): void;
    writeBoolean(value: bool): void;
    writeInt16(value: i16, littleEndian: bool): void;
    writeUint16(value: u16, littleEndian: bool): void;
    writeInt32(value: i32, littleEndian: bool): void;
    writeUint32(value: u32, littleEndian: bool): void;
    writeInt64(value: i64, littleEndian: bool): void;
    writeUint64(value: u64, littleEndian: bool): void;
    writeFloat32(value: f32, littleEndian: bool): void;
    writeFloat64(value: f64, littleEndian: bool): void;
    writeBytes(bytes: usize, begin: i32, end: i32): void;
    write(value: usize, encoding: usize): void;
    readInt8(): i8;
    readUint8(): u8;
    readBoolean(): bool;
    readInt16(littleEndian: bool): i16;
    readUint16(littleEndian: bool): u16;
    readInt32(littleEndian: bool): i32;
    readUint32(littleEndian: bool): u32;
    readInt64(littleEndian: bool): i64;
    readUint64(littleEndian: bool): u64;
    readFloat32(littleEndian: bool): f32;
    readFloat64(littleEndian: bool): f64;
    readBytes(length: i32): usize;
    read(length: i32, encoding: usize): usize;
    toString(): usize;
  }
}
export default ASModule;
